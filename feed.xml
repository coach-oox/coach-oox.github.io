

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2022-01-19T16:39:27+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>VSCode 다크 테마 간단 비교</title>
    <link href="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" rel="alternate" type="text/html" title="VSCode 다크 테마 간단 비교" />
    <published>2022-01-12T00:00:00+08:00</published>
  
    <updated>2022-01-12T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="development" />
    
  

  
    <summary>
      





      가끔 편집기 테마가 질릴 때면 이것 저것 설치하고 지우기를 반복하지만, 시간이 지나면 자꾸 까먹고선 또 깔고 지우는 내 자신을 위해 쓰는 심심풀이 글. 참고로 나는 모든 디바이스를 다크 모드로 놓고 쓰고, 그렇지 않을 때도 (다크 모드라는게 없었을 때도) 무조건 편집기 테마는 어두운 테마를 고집하는 사람이기 때문에 라이트 테마 평가는 제외했다.

GitHub Theme - Dark Dimmed (7 /10)


  Name: GitHub Theme
  Publisher: GitHub
  VS Marketplace Link


GitHub 테마들 중 가장 마음에 드는 테마. 대비가 약해서 눈이 아프지 않고, 전반적으로 키워드 구분에 용이한 (Dark 테마에서는 useState와 타입 지정 부분이 같은 컬...
    </summary>
  

  </entry>

  
  <entry>
    <title>react-router-dom 버전 6 이상에서 중첩된 라우팅 사용하는 방법</title>
    <link href="https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/" rel="alternate" type="text/html" title="react-router-dom 버전 6 이상에서 중첩된 라우팅 사용하는 방법" />
    <published>2022-01-11T00:00:00+08:00</published>
  
    <updated>2022-01-11T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      /* (하위 전체 경로 선택)을 사용하는 방법

먼저 다음과 같이 라우터에서 부모 경로에 /* 부분을 추가해, 해당 라우트가 하위 라우트를 모두 포함하도록 만든다.

function Router() {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Users /&amp;gt;} /&amp;gt;
        &amp;lt;Route path="/:userId/*" element={&amp;lt;User /&amp;gt;} /&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
}


그 다음 해당 경로 (부모의) 컴포넌트에서 각각을 라우팅 해준다. 이때 pa...
    </summary>
  

  </entry>

  
  <entry>
    <title>react-router-dom 버전 6 이상 변경점 요약 정리</title>
    <link href="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" rel="alternate" type="text/html" title="react-router-dom 버전 6 이상 변경점 요약 정리" />
    <published>2022-01-10T00:00:00+08:00</published>
  
    <updated>2022-01-10T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      react-router-dom이 버전 5에서 6으로 업데이트 되면서 몇 가지 메이저 변경점이 생겼으며, 요약하면 다음과 같다. (추천 문서 : React Router Overview)

Routes

버전 6부터 Switch는 더이상 사용되지 않는다. 오피셜에 따라, Switch는 Routes라는 친구로 대체 되었다.

exact

버전 6부터 Routes가 알아서 최적의 경로를 배정 해주기 때문에, 기존에 Route에 사용했던 exact 속성을 더이상 사용하지 않게 되었다.

*

다수의 라우팅을 매칭하고 싶은 경우, 다음 코드 예제와 같이 URL 뒤에 *를 사용한다.

&amp;lt;Route path="/user/*" element={&amp;lt;User /&amp;gt;} /&amp;gt;


element

다음 코드 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>React Router 주요 Hooks API 정리</title>
    <link href="https://dohaelee.github.io/posts/2022-01-09-react-router-v6-hooks/" rel="alternate" type="text/html" title="React Router 주요 Hooks API 정리" />
    <published>2022-01-09T00:00:00+08:00</published>
  
    <updated>2022-01-19T16:38:07+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-09-react-router-v6-hooks/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-09-react-router-v6-hooks/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      React Router에서 제공하는 Hooks API에 대한 요약 정리. 참고로 React Router는 react-router, react-router-dom, react-router-native 3개의 다른 패키지로 배포되고 있다.

useParams


  useParams


useParams()는 현재 URL을 통해 파라미터를 가져올 때 사용하는 Hook이다.

import { Routes, Route} from 'react-router-dom';

function App() {
  return (
    &amp;lt;Routes&amp;gt;
      &amp;lt;Route path="users"&amp;gt;
        &amp;lt;Route path=":userId" element={&amp;lt;ProfilePage ...
    </summary>
  

  </entry>

  
  <entry>
    <title>React 타입스크립트 사용시 제네릭 지원 안하는 경우 대처법</title>
    <link href="https://dohaelee.github.io/posts/2021-12-29-typescript-tip-react-router-v6-generic/" rel="alternate" type="text/html" title="React 타입스크립트 사용시 제네릭 지원 안하는 경우 대처법" />
    <published>2021-12-29T00:00:00+08:00</published>
  
    <updated>2021-12-29T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-12-29-typescript-tip-react-router-v6-generic/</id>
    <content src="https://dohaelee.github.io/posts/2021-12-29-typescript-tip-react-router-v6-generic/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      실습할 때 흔히 사용하게 되는 useParams()와 같은 Hook들이 React Router 버전 업 (5.xx → 6.xx) 이후 제네릭을 지원하지 않아서, 최근 React + Typescript TIL 멘토링 그룹에서 가장 많이 올라오는 질문이다. 계속 React 공부를 하다보면 단순히 React Router만의 문제가 아닐 수 있어서 속성으로 작성해보는 글.

우선 기존과 같은 방식 (버전 업 이전)의 일반적인 상황에서, useParams()에 제네릭으로 타입을 지정하려고 다음과 같은 interface를 작성했다고 가정해보자.

interface IProps {
  id: number;
}


다음과 같이 제네릭으로 타입을 지정해본다.

const { id } = useParams&amp;lt;IPro...
    </summary>
  

  </entry>

</feed>


