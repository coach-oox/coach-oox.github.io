

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2022-01-19T11:54:57+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>객체를 순회하는 방법</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-object/" rel="alternate" type="text/html" title="객체를 순회하는 방법" />
    <published>2022-01-19T11:53:18+08:00</published>
  
    <updated>2022-01-19T11:53:18+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-object/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-object/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
  

  
    <summary>
      





      객체를 순회하는 방법

다음과 같은 객체를 가정할 때, 내부 배열을 각각 순회하고자 하는 경우.

const obj = {
  a: [1, 2, 3],
  b: [4, 5, 6],
  c: [7, 8, 9],
};


먼저 객체의 키 값만 뽑아내기 위해서는 Object.keys()를 사용한다. 이때 결과 값은 키 값 (string)을 배열로 나타낸 것인데, 이를 사용해서 obj[key] 형태로 각각의 프로퍼티에 접근할 수 있게 된다. 이를 코드로 요약하자면 다음과 같다.

Object.keys(obj); // ['a', 'b', 'c']
Object.keys(obj).map((key) =&amp;gt; obj[key]); // [Array(3), Array(3), Array(3)]


타입스크립트에서 객체 타...
    </summary>
  

  </entry>

  
  <entry>
    <title>React.memo</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-react-memo/" rel="alternate" type="text/html" title="React.memo" />
    <published>2022-01-19T11:52:48+08:00</published>
  
    <updated>2022-01-19T11:52:48+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-react-memo/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-react-memo/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
  

  
    <summary>
      





      불필요한 Re-Render를 방지하고, 성능을 최적화 하기 위해 사용한다.

    </summary>
  

  </entry>

  
  <entry>
    <title>react-beautiful-dnd</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-react-beautiful-dnd/" rel="alternate" type="text/html" title="react-beautiful-dnd" />
    <published>2022-01-19T11:52:14+08:00</published>
  
    <updated>2022-01-19T11:52:14+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-react-beautiful-dnd/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-react-beautiful-dnd/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
  

  
    <summary>
      





      react-beautiful-dnd는 React에서 Drag &amp;amp; Drop UI를 보다 쉽게 만들 수 있게 도와주는 라이브러로, 비슷한 라이브러리인 react-dnd나 react-draggable에 비해 비교적 단순한 UI 제작에 적합한 친구다. 인기도는 NPM Trends를 기준으로 react-dnd와 비슷한 수준이며, 개인적으로 자유도는 react-dnd가 높고, 단순한 UI에 모던한 느낌 (애니메이션 기본 적용)을 주고 싶다면 react-beautiful-dnd가 훨씬 난이도는 낮은 것 같다. 만들고자하는 UI에 따라 결정하면 될 듯.

DragDropContext


  


가장 먼저 DND를 구성할 애플리케이션 (DND를 구성할 영역)을 DragDropContext 컴포넌트로 감싼다. ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Apexcharts</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-apexchart/" rel="alternate" type="text/html" title="Apexcharts" />
    <published>2022-01-19T11:51:27+08:00</published>
  
    <updated>2022-01-19T11:51:27+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-apexchart/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-apexchart/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
  

  
    <summary>
      





      Apexcharts.js


  Apexcharts
  React Charts 문서
  다양한 옵션을 통해 커스터마이징 할 수 있다. 예를들어 theme 옵션을 지정하면 모드 (다크 or 라이트)나 팔레트를 지정할 수 있고,


    </summary>
  

  </entry>

  
  <entry>
    <title>React Hook Form</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-react-hook-form/" rel="alternate" type="text/html" title="React Hook Form" />
    <published>2022-01-19T11:51:17+08:00</published>
  
    <updated>2022-01-19T11:51:17+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-react-hook-form/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-react-hook-form/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      React Hook Form은 React에서 form을 보다 쉽게 다루기 위한 라이브러리이다. form을 핸들링 하기 위해 작성해야 하는 코드 중에는 일반적으로 중복되는 노가다가 많은데, React Hook Form을 사용한다면 이러한 단점을 보완할 수 있다.

React Hook Form와 비슷한 라이브러리로는 Formik이라는 친구도 있다. NPM Trends를 기준으로 보자면 거의 비슷한 수준의 인지도를 가지고 있는데, 어느 것을 써도 비슷한 효과를 얻을 수 있으나, 내 경우 React Hook Form이 더 젊고, 업데이트가 잘 되서 사용한다.

어쨌든, 이 친구는 우선 우리들의 귀찮음을 줄여준다는 점에서 이미 큰 점수를 얻고 들어가는데, 성능도 꽤 괜찮고, 유효성 검사에도 능하다는 장점까지 갖...
    </summary>
  

  </entry>

</feed>


