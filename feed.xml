

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2022-01-19T16:36:11+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Apexcharts</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-apexchart/" rel="alternate" type="text/html" title="Apexcharts" />
    <published>2022-01-19T11:51:27+08:00</published>
  
    <updated>2022-01-19T11:51:27+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-apexchart/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-apexchart/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
  

  
    <summary>
      





      Apexcharts.js


  Apexcharts
  React Charts 문서
  다양한 옵션을 통해 커스터마이징 할 수 있다. 예를들어 theme 옵션을 지정하면 모드 (다크 or 라이트)나 팔레트를 지정할 수 있고,


    </summary>
  

  </entry>

  
  <entry>
    <title>초보 개발자를 위한 VSCode 단축키 기초 활용 TIP 3가지</title>
    <link href="https://dohaelee.github.io/posts/2022-01-19-object-interface-type-tip/" rel="alternate" type="text/html" title="초보 개발자를 위한 VSCode 단축키 기초 활용 TIP 3가지" />
    <published>2022-01-19T11:44:24+08:00</published>
  
    <updated>2022-01-19T11:44:24+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-19-object-interface-type-tip/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-19-object-interface-type-tip/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="development" />
    
  

  
    <summary>
      





      복잡한 API 데이터 타입을 지정하는 방법


  받아오려는 데이터를 콘솔에 찍어 봄
  마우스 오른쪽 클릭 → Store object as global variable
  콘솔에서 Object.keys(temp1).join()하면 객체의 모든 키 값 가져올 수 있음
  해당 키를 앞뒤 따옴표 없이 복사
  쉼표 하나 선택 후, cmd + d 단축키 사용해서 모든 쉼표 선택해 지우고 엔터
  모든 키 앞에 커서가 깜빡이는 상태에서 cmd + → 단축키로 끝으로 이동한 다음, :와 ; 작성
  콜론과 세미콜론 사이에 커서가 깜빡이는 상태로 놔둠
  콘솔에서 Object.values(temp1).map((value) =&amp;gt; typeof value).join()하면 객체의 모든 값의 타입을 가져올 수 있...
    </summary>
  

  </entry>

  
  <entry>
    <title>VSCode 다크 테마 간단 비교</title>
    <link href="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" rel="alternate" type="text/html" title="VSCode 다크 테마 간단 비교" />
    <published>2022-01-12T00:00:00+08:00</published>
  
    <updated>2022-01-12T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="development" />
    
  

  
    <summary>
      





      가끔 편집기 테마가 질릴 때면 이것 저것 설치하고 지우기를 반복하지만, 시간이 지나면 자꾸 까먹고선 또 깔고 지우는 내 자신을 위해 쓰는 심심풀이 글. 참고로 나는 모든 디바이스를 다크 모드로 놓고 쓰고, 그렇지 않을 때도 (다크 모드라는게 없었을 때도) 무조건 편집기 테마는 어두운 테마를 고집하는 사람이기 때문에 라이트 테마 평가는 제외했다.

GitHub Theme - Dark Dimmed (7 /10)


  Name: GitHub Theme
  Publisher: GitHub
  VS Marketplace Link


GitHub 테마들 중 가장 마음에 드는 테마. 대비가 약해서 눈이 아프지 않고, 전반적으로 키워드 구분에 용이한 (Dark 테마에서는 useState와 타입 지정 부분이 같은 컬...
    </summary>
  

  </entry>

  
  <entry>
    <title>react-router-dom 버전 6 이상에서 중첩된 라우팅 사용하는 방법</title>
    <link href="https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/" rel="alternate" type="text/html" title="react-router-dom 버전 6 이상에서 중첩된 라우팅 사용하는 방법" />
    <published>2022-01-11T00:00:00+08:00</published>
  
    <updated>2022-01-11T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-11-react-router-dom-v6-nested-routes/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      /* (하위 전체 경로 선택)을 사용하는 방법

먼저 다음과 같이 라우터에서 부모 경로에 /* 부분을 추가해, 해당 라우트가 하위 라우트를 모두 포함하도록 만든다.

function Router() {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Users /&amp;gt;} /&amp;gt;
        &amp;lt;Route path="/:userId/*" element={&amp;lt;User /&amp;gt;} /&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
}


그 다음 해당 경로 (부모의) 컴포넌트에서 각각을 라우팅 해준다. 이때 pa...
    </summary>
  

  </entry>

  
  <entry>
    <title>react-router-dom 버전 6 이상 변경점 요약 정리</title>
    <link href="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" rel="alternate" type="text/html" title="react-router-dom 버전 6 이상 변경점 요약 정리" />
    <published>2022-01-10T00:00:00+08:00</published>
  
    <updated>2022-01-10T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      react-router-dom이 버전 5에서 6으로 업데이트 되면서 몇 가지 메이저 변경점이 생겼으며, 요약하면 다음과 같다. (추천 문서 : React Router Overview)

Routes

버전 6부터 Switch는 더이상 사용되지 않는다. 오피셜에 따라, Switch는 Routes라는 친구로 대체 되었다.

exact

버전 6부터 Routes가 알아서 최적의 경로를 배정 해주기 때문에, 기존에 Route에 사용했던 exact 속성을 더이상 사용하지 않게 되었다.

*

다수의 라우팅을 매칭하고 싶은 경우, 다음 코드 예제와 같이 URL 뒤에 *를 사용한다.

&amp;lt;Route path="/user/*" element={&amp;lt;User /&amp;gt;} /&amp;gt;


element

다음 코드 ...
    </summary>
  

  </entry>

</feed>


