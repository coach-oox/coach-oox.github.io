

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2021-09-07T22:12:59+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>React 절대 경로 (또는 별칭) 사용하는 2가지 방법 (CRACO, WebPack)</title>
    <link href="https://dohaelee.github.io/posts/2021-07-01-cra-absolute-route-craco-alias-webpack/" rel="alternate" type="text/html" title="React 절대 경로 (또는 별칭) 사용하는 2가지 방법 (CRACO, WebPack)" />
    <published>2021-07-01T00:00:00+08:00</published>
  
    <updated>2021-07-01T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-07-01-cra-absolute-route-craco-alias-webpack/</id>
    <content src="https://dohaelee.github.io/posts/2021-07-01-cra-absolute-route-craco-alias-webpack/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      CRA 프로젝트

먼저 CRA로 세팅한 경우에는 비교적 간단하게 해결할 수 있다. 자바스크립트 환경이라면 jsconfig.json 파일을, 타입스크립트 환경이라면 tsconfig.json 파일을 만들고 다음 코드를 추가한다.

{
  "compilerOptions": {
    "baseUrl": "src"
  },
  "includes": ["src"]
}


CRACO를 사용한 별칭 사용법

만약 절대 경로가 아니라 별칭 (Alias)을 사용하고 싶다면 WebPack 설정을 커스터마이징 하면 되는데, eject 하거나 (별로 추천하지 않음) 다음 라이브러리를 설치해 WebPack 설정을 오버라이드하면 된다. 이때 craco를 선호하지 않는다면 customize-cra, react-app-rewire...
    </summary>
  

  </entry>

  
  <entry>
    <title>CSS 특정 비율을 가지는 이미지 만들기 (aspect-ratio · object-fit)</title>
    <link href="https://dohaelee.github.io/posts/2021-06-25-css-aspect-ratio-object-fit/" rel="alternate" type="text/html" title="CSS 특정 비율을 가지는 이미지 만들기 (aspect-ratio · object-fit)" />
    <published>2021-06-25T00:00:00+08:00</published>
  
    <updated>2021-06-25T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-25-css-aspect-ratio-object-fit/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-25-css-aspect-ratio-object-fit/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="css" />
    
  

  
    <summary>
      





      사용하는 기술


  aspect-ratio
  object-fit


사용 예시

예전처럼 비율에 따라서 padding을 잡아주고 어쩌고 이딴거 없음. 쏘 이지.

&amp;lt;div class="container"&amp;gt;
  &amp;lt;img src="./img.jpg" /&amp;gt;
&amp;lt;/div&amp;gt;


.container {
  width: 300px;
  aspect-ratio: 1 / 1;
}

img {
  width: 100%;
  height: auto;
  object-fit: cover;
}


    </summary>
  

  </entry>

  
  <entry>
    <title>내가 사용하는 React 애플리케이션 파일 구조</title>
    <link href="https://dohaelee.github.io/posts/2021-06-22-react-application-file-structure/" rel="alternate" type="text/html" title="내가 사용하는 React 애플리케이션 파일 구조" />
    <published>2021-06-22T00:00:00+08:00</published>
  
    <updated>2021-06-22T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-22-react-application-file-structure/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-22-react-application-file-structure/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
    <category term="development" />
    
  

  
    <summary>
      





      일반적으로 선호되는 리액트 애플리케이션의 파일 구조는 파일 유형에 따라 분류하는 것이다. 파일 유형에 따라 분류한다는 것은, 비슷한 파일끼리 묶는 것을 의미한다. 이 방법은 자주 함께 사용되는 파일들을 함께 보관하는 Colocation (코로케이션) 원칙에 의해 컴포턴트는 컴포넌트끼리, 또 그 내부에서 구분되는 라우트나 컴포넌트의 묶음으로 분류될 수 있다.

사실 파일 구조를 어떻게 잡느냐는 혼자 작업하는지, 협업하는지, 프리랜서인지, 직장을 다니는지 등에 따라 (일반적으로 회사에는 어느 정도 정해진 규정이 있기 때문에 이런 부분을 걱정할 필요는 없다.) 다르고, 정해진 정답은 없다. 하지만 이 부분이 의외로 꽤 많이 받는 질문 중 하나라서, 생각난김에 내가 보편적인 상황에서 사용하는 파일 구조를 소개...
    </summary>
  

  </entry>

  
  <entry>
    <title>절대 주소와 상대 주소의 이해 (슬래시의 차이)</title>
    <link href="https://dohaelee.github.io/posts/2021-06-21-web-absoulte-relative-path/" rel="alternate" type="text/html" title="절대 주소와 상대 주소의 이해 (슬래시의 차이)" />
    <published>2021-06-21T00:00:00+08:00</published>
  
    <updated>2021-06-21T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-21-web-absoulte-relative-path/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-21-web-absoulte-relative-path/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="web" />
    
  

  
    <summary>
      





      path 형식 (상대 주소)의 경우 현재 파일 위치를 기준으로 경로를 지정한다.

function Something() {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;img src='img/sample.png'&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}


위와 같은 앞에 슬래시가 없는 img/sample.png 경로를 가정해보자. 이 경우 현재 디렉토리를 (클라이언트라면 클라이언트를) 기준으로 서브 디렉토리인 img 안에 있는 sample.png 파일을 가져온다.

function Something() {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;img src='/img/sample.png'&amp;g...
    </summary>
  

  </entry>

  
  <entry>
    <title>React props.history.push('/')와 window.location.replace('/') 차이점</title>
    <link href="https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/" rel="alternate" type="text/html" title="React props.history.push('/')와 window.location.replace('/') 차이점" />
    <published>2021-06-17T00:00:00+08:00</published>
  
    <updated>2021-06-17T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      props.history.push('/')는 새로운 HTTP 요청을 생성하지 않는다. 반면에 window.location.replace()는 새로운 요청을 생성한다. i.g., window.location.replace() 또는 window.location.href을 사용할 경우 완전히 새로고침되고, 클라이언트 측에 상태는 초기화 된다.

리액트에서 사용자를 다른 페이지로 이동시키기 위해서 일반적으로 props.history.push()를 사용한다. 이 history에는 사용자가 여태까지 타고온 경로가 스택처럼 다 쌓여이게 되는데, 여기다 새로운 경로를 push()함으로써 최신 경로를 원하는 위치로 지정하게 된다. history.replace()의 경우, 새로운 history를 생성하는 것이 아니라 현...
    </summary>
  

  </entry>

</feed>


