

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2021-08-23T22:39:53+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>React props.history.push('/')와 window.location.replace('/') 차이점</title>
    <link href="https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/" rel="alternate" type="text/html" title="React props.history.push('/')와 window.location.replace('/') 차이점" />
    <published>2021-06-17T00:00:00+08:00</published>
  
    <updated>2021-06-17T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-17-react-props-history-push-window-location-replace/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      props.history.push('/')는 새로운 HTTP 요청을 생성하지 않는다. 반면에 window.location.replace()는 새로운 요청을 생성한다. i.g., window.location.replace() 또는 window.location.href을 사용할 경우 완전히 새로고침되고, 클라이언트 측에 상태는 초기화 된다.

리액트에서 사용자를 다른 페이지로 이동시키기 위해서 일반적으로 props.history.push()를 사용한다. 이 history에는 사용자가 여태까지 타고온 경로가 스택처럼 다 쌓여이게 되는데, 여기다 새로운 경로를 push()함으로써 최신 경로를 원하는 위치로 지정하게 된다. history.replace()의 경우, 새로운 history를 생성하는 것이 아니라 현...
    </summary>
  

  </entry>

  
  <entry>
    <title>React 컴포넌트에서 location, history 등을 사용하기 위한 withRouter 사용법</title>
    <link href="https://dohaelee.github.io/posts/2021-06-16-react-props-withrouter/" rel="alternate" type="text/html" title="React 컴포넌트에서 location, history 등을 사용하기 위한 withRouter 사용법" />
    <published>2021-06-16T00:00:00+08:00</published>
  
    <updated>2021-06-16T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-16-react-props-withrouter/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-16-react-props-withrouter/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      withRouter란 라우트가 아닌 컴포넌트에서 location, history 등을 props로 전달받기 위해서 사용하는 HoC를 의미한다. 다음 코드 예제와 같이 사용한다.

import React from "react";
import { withRouter } from "react-router-dom";

const Something = withRouter((props) =&amp;gt; {
  /* ... */
});

export default Something();


e.g., React Styled-Component 현재 경로 메뉴 스타일 강조하기

    </summary>
  

  </entry>

  
  <entry>
    <title>react-flash-message 에러 (Module not found) 해결 방법</title>
    <link href="https://dohaelee.github.io/posts/2021-06-15-react-flash-message-error/" rel="alternate" type="text/html" title="react-flash-message 에러 (Module not found) 해결 방법" />
    <published>2021-06-15T00:00:00+08:00</published>
  
    <updated>2021-06-15T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-15-react-flash-message-error/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-15-react-flash-message-error/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      Module not found: Can't resolve 'react-flash-message'


다음 명령어로 해결할 수 있다.

yarn add https://github.com/Looskie/react-flash-message.git


가끔가다 쓰는 건데, 사용법이 단순해서 한 번도 문제가 없었다가 갑자기 모듈을 찾을 수 없다고 난리여서 30분을 허비했다. 등잔 밑이 어둡다고 공식 레포 이슈에 벌써 같은 문제를 겪는 사람이 이슈를 발행했고, 코멘트 중에 해결책을 공유해준 사람이 있어서 해결할 수 있었다.

    </summary>
  

  </entry>

  
  <entry>
    <title>React CORS 문제 해결을 위한 Proxy 서버 설정 방법 (Access-Control-Allow-Origin 에러)</title>
    <link href="https://dohaelee.github.io/posts/2021-06-14-react-cors-proxy-error/" rel="alternate" type="text/html" title="React CORS 문제 해결을 위한 Proxy 서버 설정 방법 (Access-Control-Allow-Origin 에러)" />
    <published>2021-06-14T00:00:00+08:00</published>
  
    <updated>2021-06-14T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-14-react-cors-proxy-error/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-14-react-cors-proxy-error/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      Access to XMLHttpRequest at 'http://localhost:4000' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.


package.json에 다음 항목을 추가한다.

{
  "proxy": "http://localhost:4000"
}


지정할 URL은 접속하고자 하는 서버의 Base URL이며, 위와 같이 proxy 속성을 지정한 다음에는 요청을...
    </summary>
  

  </entry>

  
  <entry>
    <title>CRACO를 사용한 Emotion 사용 설정 방법 (@jsx 선언 제거)</title>
    <link href="https://dohaelee.github.io/posts/2021-06-13-craco-emotion-react/" rel="alternate" type="text/html" title="CRACO를 사용한 Emotion 사용 설정 방법 (@jsx 선언 제거)" />
    <published>2021-06-13T00:00:00+08:00</published>
  
    <updated>2021-06-13T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-06-13-craco-emotion-react/</id>
    <content src="https://dohaelee.github.io/posts/2021-06-13-craco-emotion-react/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="css-in-js" />
    
  

  
    <summary>
      





      CRA로 세팅한 리액트 프로젝트에서 Emotion (@emotion/react)을 사용하기 위해서는 다음과 같이 매번 @jsx 관련 선언을 명시하는 과정이 필요하다. 이 과정을 생략하기 위해서는 Babel 설정이 필요한데, CRA는 Babel의 사용자 설정을 막아두었기 때문에 eject를 사용해야 이 부분을 설정할 수 있다. (한 번 eject한 프로젝트는 이전 상태로 되돌아 갈 수 없다.)

Create React App Configuration Override의 약자인 CRACO를 사용하면 eject 하지 않고도 리액트 애플리케이션 설정을 변경할 수 있다.

yarn add @craco/craco


package.json을 다음과 같이 수정한다.

{
  "scripts": {
    "start...
    </summary>
  

  </entry>

</feed>


