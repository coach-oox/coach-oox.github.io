

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://dohaelee.github.io/</id>
  <title>Dohae Lee</title>
  <subtitle>"개발자 이도해 기술 블로그"</subtitle>
  <updated>2022-01-14T22:04:21+08:00</updated>
  <author>
    <name>Dohae Lee</name>
    <uri>https://dohaelee.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://dohaelee.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="ko"
    href="https://dohaelee.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Dohae Lee </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>VSCode 다크 테마 간단 비교</title>
    <link href="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" rel="alternate" type="text/html" title="VSCode 다크 테마 간단 비교" />
    <published>2022-01-12T00:00:00+08:00</published>
  
    <updated>2022-01-12T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-12-vscode-extensions-themes/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="development" />
    
  

  
    <summary>
      





      가끔 편집기 테마가 질릴 때면 이것 저것 설치하고 지우기를 반복하지만, 시간이 지나면 자꾸 까먹고선 또 깔고 지우는 내 자신을 위해 쓰는 심심풀이 글. 참고로 나는 모든 디바이스를 다크 모드로 놓고 쓰고, 그렇지 않을 때도 (다크 모드라는게 없었을 때도) 무조건 편집기 테마는 어두운 테마를 고집하는 사람이기 때문에 라이트 테마 평가는 제외했다.

GitHub Theme - Dark Dimmed (7 /10)


  Name: GitHub Theme
  Publisher: GitHub
  VS Marketplace Link


GitHub 테마들 중 가장 마음에 드는 테마. 대비가 약해서 눈이 아프지 않고, 전반적으로 키워드 구분에 용이한 (Dark 테마에서는 useState와 타입 지정 부분이 같은 컬...
    </summary>
  

  </entry>

  
  <entry>
    <title>react-router-dom 버전 6 이상 변경점 요약 정리</title>
    <link href="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" rel="alternate" type="text/html" title="react-router-dom 버전 6 이상 변경점 요약 정리" />
    <published>2022-01-10T00:00:00+08:00</published>
  
    <updated>2022-01-10T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/</id>
    <content src="https://dohaelee.github.io/posts/2022-01-10-update-react-router-dom/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      react-router-dom이 버전 5에서 6으로 업데이트 되면서 몇 가지 메이저 변경점이 생겼으며, 요약하면 다음과 같다. (추천 문서 : React Router Overview)

Routes

버전 6부터 Switch는 더이상 사용되지 않는다. 오피셜에 따라, Switch는 Routes라는 친구로 대체 되었다.

exact

버전 6부터 Routes가 알아서 최적의 경로를 배정 해주기 때문에, 기존에 Route에 사용했던 exact 속성을 더이상 사용하지 않게 되었다.

*

다수의 라우팅을 매칭하고 싶은 경우, 다음 코드 예제와 같이 URL 뒤에 *를 사용한다.

&amp;lt;Route path="/user/*" element={&amp;lt;User /&amp;gt;} /&amp;gt;


element

다음 코드 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>React-Query 입문자를 위한 기본 사용법</title>
    <link href="https://dohaelee.github.io/posts/2021-12-19-react-query/" rel="alternate" type="text/html" title="React-Query 입문자를 위한 기본 사용법" />
    <published>2021-12-19T00:00:00+08:00</published>
  
    <updated>2021-12-19T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-12-19-react-query/</id>
    <content src="https://dohaelee.github.io/posts/2021-12-19-react-query/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      React-Query 영업 글.

React-Query는 React에서 서버 사이드 상태를 편리하게 Fetching, Caching, Synchronizing, Updating 할 수 있도록 도와주는 라이브러리이다.

기본 사용법

React-Query가 좋은 이유 첫 번째는 단연코 사용하기 쉽다는 것이다.

const queryClient = new QueryClient();

function App() {
  return (
    &amp;lt;QueryClientProvider client={queryClient}&amp;gt;
      &amp;lt;Todos /&amp;gt;
    &amp;lt;/QueryClientProvider&amp;gt;
  );
}


먼저 QueryClient()를 사용해서 Query Client를 생...
    </summary>
  

  </entry>

  
  <entry>
    <title>React Hook From 사용법 #2 에러 핸들링 응용</title>
    <link href="https://dohaelee.github.io/posts/2021-11-08-react-hook-form-usage-2/" rel="alternate" type="text/html" title="React Hook From 사용법 #2 에러 핸들링 응용" />
    <published>2021-11-08T00:00:00+08:00</published>
  
    <updated>2021-11-08T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-11-08-react-hook-form-usage-2/</id>
    <content src="https://dohaelee.github.io/posts/2021-11-08-react-hook-form-usage-2/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      에러를 (유효성 검사) 옵션 형태로 지정하는 것은 편리하나, 실무에서는 이 기능만으로 원하는 에러를 모두 핸들링 하기에는 부족한 감이 없잖아 있다. 예를들어서 사용자가 제출한 데이터가 데이터베이스에 이미 있는 데이터라던지. 이런 경우에는 사용자가 별도로 에러를 핸들링 할 수도 있으며, 본문의 내용은 사용자 정의 에러를 핸들링하는 몇 가지 간단한 예시를 정리한 것이다.

validate

다음 코드 예제는 register()에 validate 옵션을 통해 에러를 핸들링 하고 있다. validate는 함수를 가지는데, 이 함수는 현재 값을 의미하는 value를 인자로 가진다. 즉, 이 함수 내부에서 현재 값에 대한 어떤 조건을 검사하고 true 또는 false를 리턴해 에러를 발생 시킬 수 있다. (tru...
    </summary>
  

  </entry>

  
  <entry>
    <title>React Hook From 사용법 #1 기초 활용</title>
    <link href="https://dohaelee.github.io/posts/2021-11-07-react-hook-form-usage-1/" rel="alternate" type="text/html" title="React Hook From 사용법 #1 기초 활용" />
    <published>2021-11-07T00:00:00+08:00</published>
  
    <updated>2021-11-07T00:00:00+08:00</updated>
  
    <id>https://dohaelee.github.io/posts/2021-11-07-react-hook-form-usage-1/</id>
    <content src="https://dohaelee.github.io/posts/2021-11-07-react-hook-form-usage-1/" />
    <author>
      <name>Dohae Lee</name>
    </author>

  
    
    <category term="react" />
    
  

  
    <summary>
      





      React Hook Form은 React에서 form을 보다 쉽게 다루기 위한 라이브러리이다. form을 핸들링 하기 위해 작성해야 하는 코드 중에는 일반적으로 중복되는 노가다가 많은데, React Hook Form을 사용한다면 이러한 단점을 보완할 수 있다.

React Hook Form와 비슷한 라이브러리로는 Formik이라는 친구도 있다. NPM Trends를 기준으로 보자면 거의 비슷한 수준의 인지도를 가지고 있는데, 어느 것을 써도 비슷한 효과를 얻을 수 있으나, 내 경우 React Hook Form이 더 젊고, 업데이트가 잘 되서 사용한다.

어쨌든, 이 친구는 우선 우리들의 귀찮음을 줄여준다는 점에서 이미 큰 점수를 얻고 들어가는데, 성능도 꽤 괜찮고, 유효성 검사에도 능하다는 장점까지 갖...
    </summary>
  

  </entry>

</feed>


