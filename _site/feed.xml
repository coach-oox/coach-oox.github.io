

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Chirpy</title>
  <subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle>
  <updated>2021-08-01T12:45:49+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>타입스크립트 .eslintrc 파일 Parsing Error 해결 방법</title>
    <link href="/posts/tslint-error/" rel="alternate" type="text/html" title="타입스크립트 .eslintrc 파일 Parsing Error 해결 방법" />
    <published>2021-06-14T00:00:00+08:00</published>
  
    <updated>2021-06-14T00:00:00+08:00</updated>
  
    <id>/posts/tslint-error/</id>
    <content src="/posts/tslint-error/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="report" />
    
    <category term="error" />
    
  

  
    <summary>
      





      증상

.eslintrc.js 파일에 타입스크립트 (과거 .tslint) 설정을 할 때 발생하는 Parsing Error 또는 .eslintrc.js 파일 에러.

parsing error: "parseroptions.project" has been set for @typescript-eslint/parser. the file does not match your project config: .eslintrc.js. the file must be included in at least one of the projects provided.


module.exports 부분에 위와 같은 에러가 생성된다.

해결 방법

먼저 .eslintrc.js 파일의 parserOptions 항목에 project를 다음과...
    </summary>
  

  </entry>

  
  <entry>
    <title>내가 사용하는 Commit · PR 규칙</title>
    <link href="/posts/commit-convention/" rel="alternate" type="text/html" title="내가 사용하는 Commit · PR 규칙" />
    <published>2021-02-04T00:00:00+08:00</published>
  
    <updated>2021-02-04T00:00:00+08:00</updated>
  
    <id>/posts/commit-convention/</id>
    <content src="/posts/commit-convention/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="wiki" />
    
    <category term="convention" />
    
  

  
    <summary>
      





      Commit 규칙

$ git commit -m "Prefix: Message (#issue)"



  Prefix: Message 형식으로 작성한다.
  접두사는 모두 소문자로 작성한다.
  접두사와 콜론 (:)은 띄어쓰지 않는다.
  콜론과 메시지는 한 칸 띄어쓴다.
  관련된 이슈 번호는 맨 뒤에 괄호 (())안에 작성한다.
  메시지와 이슈 번호는 한 칸 띄어쓴다.


메시지는 반드시 영어일 필요가 없으며, 가장 명확하고 짧게 쓸 수 있는 방법으로 작성한다. 예를들어 a.txt라는 파일을 삭제 했다면, 그것에 대해 설명하는 것보다는 delete: a.txt로 작성하는 것이 더 명확할 것이다.

접두사


  
    
      Prefix
      Description
    
  
  
...
    </summary>
  

  </entry>

  
  <entry>
    <title>내가 사용하는 Git 브랜치 전략 (Branch Strategy)</title>
    <link href="/posts/branch-strategy/" rel="alternate" type="text/html" title="내가 사용하는 Git 브랜치 전략 (Branch Strategy)" />
    <published>2021-02-03T00:00:00+08:00</published>
  
    <updated>2021-02-03T00:00:00+08:00</updated>
  
    <id>/posts/branch-strategy/</id>
    <content src="/posts/branch-strategy/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="wiki" />
    
    <category term="convention" />
    
  

  
    <summary>
      





      전략

브랜치 전략은 Git Flow, GitHub Flow 등이 있고, 선택적으로 사용하면 된다. 내 경우 혼자 일한지 오래되었기 때문에 나름의 규칙을 만들어놓고 지켜가며 일하는데, 이 브랜치 전략 역시 규칙 중 하나에 해당한다. (아마도 어쩌다보니 2개가 섞여서 내 입맛에 맞게 된듯)

main

배포 가능한 상태만을 병합하는 브랜치. 혼자 개발할 때는 대부분 이 main 브랜치에 대한 역할만 확실하다면 (GitHub Flow에서 지향하는 것처럼) 딱히 문제가 생길 일이 별로 없다. 그래서 블로그처럼 단순한 개발 (관리)의 경우 그냥 main 브랜치 하나로 퉁친다. 단, 이 경우 이슈 관리는 철저히 하자.

dev

main 브랜치에서 분기하며, 통합 브랜치의 역할로, 다음 번 배포를 위해 실질적으...
    </summary>
  

  </entry>

  
  <entry>
    <title>내가 사용하는 GitHub Issue 관리를 위한 Label 규칙</title>
    <link href="/posts/issue-label/" rel="alternate" type="text/html" title="내가 사용하는 GitHub Issue 관리를 위한 Label 규칙" />
    <published>2021-02-02T00:00:00+08:00</published>
  
    <updated>2021-02-02T00:00:00+08:00</updated>
  
    <id>/posts/issue-label/</id>
    <content src="/posts/issue-label/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="wiki" />
    
    <category term="convention" />
    
  

  
    <summary>
      





      GitHub에서 이슈를 (또는 PR)을 작성할 때 기본적으로 제공되는 레이블은 다음과 같다.


  
    
      Label
      Description
    
  
  
    
      bug
      Something isn’t working
    
    
      documentation
      Improvements or additions to documentation
    
    
      duplicate
      This issue or pull request already exists
    
    
      enhancement
      New feature or request
    
    
      good first issue
      ...
    </summary>
  

  </entry>

  
  <entry>
    <title>오랜만에 리마인드 해보는 클린 코드를 위한 기본 규칙</title>
    <link href="/posts/clean-code/" rel="alternate" type="text/html" title="오랜만에 리마인드 해보는 클린 코드를 위한 기본 규칙" />
    <published>2021-02-01T00:00:00+08:00</published>
  
    <updated>2021-02-01T00:00:00+08:00</updated>
  
    <id>/posts/clean-code/</id>
    <content src="/posts/clean-code/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="wiki" />
    
    <category term="refactoring" />
    
  

  
    <summary>
      





      Clean Code


  주석을 최소화 할 수 있는 코드
  코드 작성자가 아닌 사람도 금방 배울 수 있는 코드
  나중에 다시 읽을 때 ‘읽기 위한 공부’를 위해서 Additianal Cost를 지불하지 않아도 되는 코드
  미래의 내가 똑같은 코드를 작성해도 (코드의 내용은 달라질 수 있지만) 일정한 포맷을 유지하는 코드


Naming


  단수와 복수를 구분
  상수는 모두 대문자로 작성
  a, b 따위의 초성 퀴즈 금지
  항상 전 세계 공통 (영어) 누가봐도 유추할 수 있도록
  변수명과 클래스명에는 동사가 아니라 명사를 사용
  함수명에는 명사가 아니라 동사를 사용
  해석이 가능한 선에서 전치사는 되도록 빼자
  자바스크립트는 Camel Case, 파이썬은 PEP-8 등 언어에 따른...
    </summary>
  

  </entry>

</feed>


